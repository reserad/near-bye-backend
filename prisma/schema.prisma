generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model Post {
  id        String    @id(map: "post_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  body      String    @db.VarChar
  createdAt String    @db.VarChar
  longitude Decimal   @db.Decimal
  latitude  Decimal   @db.Decimal
  authorId  String    @db.Uuid
  author    User      @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "post_fk")
  votes     Vote[]
  comments  Comment[]
}

model Token {
  id        String @id(map: "token_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String @db.Uuid
  token     String @db.VarChar
  expiresAt String @db.VarChar
  createdAt String @db.VarChar
  updatedAt String @db.VarChar
  user      User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "token_fk")
}

model User {
  id            String    @id(map: "user_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  phoneNumber   String    @unique(map: "user_phone_un") @db.VarChar
  baseLongitude Decimal?  @db.Decimal
  createdAt     String    @db.VarChar
  baseLatitude  Decimal?  @db.Decimal
  profileImage  String?   @db.VarChar
  bio           String?   @db.VarChar
  name          String?   @db.VarChar
  tokens        Token[]
  posts         Post[]
  votes         Vote[]
  comments      Comment[]
}

model Vote {
  postId    String   @db.Uuid
  userId    String   @db.Uuid
  upvoted   Boolean? @default(true)
  downvoted Boolean? @default(false)
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([postId, userId])
}

model Comment {
  id        String    @id(map: "comment_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  parentId  String?   @db.Uuid
  parent    Comment?  @relation("comment_relation", fields: [parentId], references: [id])
  children  Comment[] @relation("comment_relation")
  authorId  String    @db.Uuid
  author    User      @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comment_fk")
  postId    String    @db.Uuid
  post      Post      @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comment_post_fk")
  body      String    @db.VarChar
  createdAt String    @db.VarChar
}
